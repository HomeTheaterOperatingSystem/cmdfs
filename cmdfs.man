.TH cmdfs 1 "24 July 2012"
.SH NAME
cmdfs \(hy command file system
.SH SYNOPSIS
.B cmdfs
<\fIsource-dir\fR> <\fImount-dir\fR> [\fIoptions\fR]
.SH DESCRIPTION
\fIcmdfs\fP is a FUSE virtual filesystem that applies an arbitary
filter command to selected files in a source directory tree to create
the destination files. It includes configurable caching and monitoring
of the source tree to limit CPU use and prefetch data.
.SH OPTIONS
\fIcmdfs\fP accepts the following options:
.TP 8
.B  \-o command=<\fIshell command\fR>
The command to run to generate the file's content [default: cat]
.TP 8
.B  \-o extension=\fIext1\fR[;\fIext2\fR[;...]]
Specify matching file extension(s) to which command is applied
.TP 8
.B  \-o path-re=<\fIregular expression\fR>
Specify regexp of pathnames to which command is applied
.TP 8
.B  \-o mime-re=<\fIregular expression\fR>
Specify regexp of mime types (as returned by \fIfile
  -b --mime-type\fP) to which command is applied 
.TP 8
.B  \-o link-thru
Pass unmatched files through to filesystem as symbolic links [default:
files not listed or accessible]
.TP 8
.B  \-o hide-empty-dirs
Don't show directories that have no matching descendant files
.TP 8
.B  \-o monitor
Watch source directory tree for new files and cache them as they
appear. New directories will be monitored [default: not monitored] 
.TP 8
.B  \-o cache-dir=<\fIdirectory\fR>
Directory to save cache files [default:
/usr/local/var/cache/cmdfs/<\fIuser\fR>/<\fIsource-dir\fR>] 
.TP 8
.B  \-o cache-size=<\fIsize in Mb\fR>
Size to attempt to limit cache directory to. Files removed on
least-recently access basis. [default: no limit] 
.TP 8
.B  \-o cache-entries=<\fIcount\fR>
Number of entries to attempt to limit cache directory to. Files
removed on least-recent access basis. [default: no limit] 
.TP 8
.B  \-o cache-expiry=<\fItime in seconds\fR>
Items in cache older than this will be replaced when read
[default: never expires]
.TP 8
.B  \-o stat-pass-thru
Don't force a stat() call to create cached file from source, just use
the source file as the target if not available.  Saves slow
directory listings if accurate sizes etc. not required.
[default: stat() calls create a cached file]
.SH EXAMPLES
Given a source tree, that includes, say, jpg images, we can generate a view
filesystem which contains the same files resized to email size.
The filter command is set up as a fileystem option at mount time. In this case
our filter option might be something like (using ImageMagick's convert
command):
.TP
	command=convert - -resize 20% -
.PP
Note we follow the UNIX convention of taking the standard input and filtering
to standard output. Being a FUSE filesystem, the child process will be run
under the group/user of the owner. The command is run within a shell (/bin/sh)
process, as if started by /bin/sh -c '<command>'
Obviously there'll be files in the source tree which we dont want to apply the
filter to. In this case we identify files of interest by extension:
.TP
	extension=jpg;gif;png
.PP
To mount the filesystem as above for a particular user:
.TP
	cmdfs /home/bob/images /mnt/myphotos "-ocommand=convert - -resize 20% -,extension=jpg;gif;png"

.SS Selection Filters

As well as just matching on extension, files of interest can be selected by
mime type, matching a regexp (cmdfs uses the file command to determine the
mimetype):
.TP
	mime-re=image/*
.PP
Or just a plain path regexp (this allows us to exclude whole directory subtrees
etc
.TP
	path-re=.*/my-images/
.PP
These options can be combined to get the required filter selection.

.SS Unmatched Files
By default, files which don't match a filter won't appear in the filesystem
view. We may want to see the original files though, so the
.TP
	link-thru
.PP
option may be specified. This will generate symbolic links to the original
files.

.SS Monitoring
The image resize example is a good example of an application where we might
want the files in the source filesystem to be filtered as they are added,
rather than just on-demand. Cmdfs uses inotify to monitor all the directories
in the tree, and automatically monitors new subdirectories as they are added:
.TP
	monitor
.PP
When you copy the latest batch of files from your camera the resized versions
will automatically be generated.

.SS Caching
cmdfs only recreates view files if the modification date changes on the source.
All files created using the filter are held in a cache directory, with a name
created as a hash from the full path. By default this directory is located in /
tmp/cmdfs-cache.<user name>, but can be changed:
.TP
	cache-dir=<dir>
.PP
Note that some systems will clear the /tmp directory tree between reboots,
which may or may not be desired.
The size of the cache directory can be limited using:
.TP
	cache-size=<size in mb>
and/or
.TP
\&  cache-entries=<number of files>
.PP
The least recently accessed cached files will be removed in the background to
maintain these limits.
Expiry on cached files can be specified with:
.TP
	cache-expiry=<time in secs>
.PP
Cached files will be recreated if the are older than this.

.SS Mounting With fstab

To aid in mounting directories for multiple users, cmdfs accepts the source
base directory as the first argument so it can be mounted using the
conventional mount.fuse script from fstab. This allows supplying cmdfs#<dir> as
the fs_spec (see man 5 fstab). The user_allow_other option needs to be enabled
in /etc/fuse.conf to allow normal users to mount (see fuse.conf). An example
fstab entry:

.DS
  cmdfs#/media/myphotos /home/bob/images fuse user,allow_other,command=convert\\040-\\040-resize\\04020%\\040-,monitor,cache-size=500,extension=jpg;gif;png 0 0
.DE

Note that the spaces in the command need to be escaped using \\040 for /etc/
fstab to parse correctly

.SS Example 2: Dynamically Generated Files

The command used to generate the output does not need to be a simple stdin-
>stdout filter, it can generate its output from whatever source it chooses. Of
course this is of limited utility unless you can specify what command/
parameters to run (otherwise every file in the filesystem would have the same
content!).
The shell command may therefore contain a substitution token, %f, which will be
replaced with the full path/filename of the input file. If, for example, the
command is simply '%f', cmdfs will attempt to execute the file (it should have
+x permission to allow this)
This effectively gives a 'CGI' type function to the filesytem. e.g. If may
contain a script:
.DS
  % cat > /home/bob/showps
  #!/bin/sh
  ps -ef
  ^D
  % chmod +x /home/bob/showps
  % cmdfs /home/bob /tmp/test "-opath-re=.*,command=%f,cache-expiry=5"
  % cat /tmp/test/showps
  UID        PID  PPID  C STIME TTY          TIME CMD
  root         1     0  0 Feb13 ?        00:00:01 /sbin/init
  root         2     0  0 Feb13 ?        00:00:00 [kthreadd]
  root         3     2  0 Feb13 ?        00:00:00 [migration/0]
  root         4     2  0 Feb13 ?        00:00:09 [ksoftirqd/0]
  root         5     2  0 Feb13 ?        00:00:00 [watchdog/0]
  \...
.DE
.PP
Note that the cache expiry time in the example has been set at 5 secs - this
means the ps results will be re-created if older than 5 sesonds.


.IP \(bu 4 
If the executable returns a non-zero exit status, cmdfs will assume that it
  has failed (will appear as 'No such file or directory').
.IP \(bu 4
It is not recommend to use the %f facility to modify the source file - this
  will invalidate the cache immediately resulting in a recreation of the output
  on next read (unless this is intended)
.IP \(bu 4
cmdfs also sets an environment variable INPUT_FILE in the child command
  process, which contains the source file name, which may be useful if the
  eventual executable is being called via a parent script.


.Ve
.SH "SEE ALSO"
.BR fusermount (1),
.SH AUTHOR
Mike Swain <mike@hiko.co.nz>
